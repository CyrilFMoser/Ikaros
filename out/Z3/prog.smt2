(set-logic ALL)
(declare-datatypes ((Type 0)) (((T_A) (T_B) (CC_A (CC_A_a Type) (CC_A_b Type) (CC_A_extends Type)) (CC_B (CC_B_a Type) (CC_B_extends Type)) (CC_C (CC_C_extends Type)) (CC_D (CC_D_a Type) (CC_D_b Type) (CC_D_extends Type)) (Boolean) (Byte) (Char) (Int) (Tuple (first Type) (second Type)) (Wildcard) (Generic (name String)))))
(declare-fun pattern_1 () Type)
(declare-fun pattern_0 () Type)
(declare-fun param_0 () Type)
(declare-fun param_1 () Type)
(declare-fun param_2 () Type)

(declare-fun to_match_type () Type)
(declare-fun t1 () Type)
(define-funs-rec ( ( constructable ((x!1 Type)) Bool)
                   ( valid ((x!1 Type)) Bool)
                   ( subcase ((x!1 Type) (x!2 Type)) Bool))
                 ( (let ((a!1 (=> ((_ is CC_A) x!1)
                                  (and (constructable (CC_A_b x!1)))))
                         (a!2 (=> ((_ is CC_B) x!1)
                                  (and (constructable  (CC_B_a x!1)))))
                         (a!3 (=> ((_ is CC_D) x!1)
                                  (and (constructable  (CC_D_a x!1)))))
                         (a!4 (=> ((_ is Tuple) x!1)
                                  (and (constructable  (first x!1))
                                       (constructable  (second x!1))))))
                     (and (not ((_ is T_A) x!1))
                          (not ((_ is T_B) x!1))
                          a!1
                          a!2
                          a!3
                          a!4))
                   (let ((a!1 (and ((_ is Tuple)
                                     (CC_A_b x!1))
                                   ((_ is T_A) (first (CC_A_b x!1)))
                                   ((_ is T_A) (second (CC_A_b x!1)))))
                         (a!3 (or ((_ is Wildcard ) (CC_B_a x!1))
                                  (and ((_ is CC_A)
                                         param_1)
                                       (subcase  (CC_B_a x!1) param_1))))
                         (a!5 (and ((_ is CC_C) x!1)
                                   (not ((_ is Wildcard )
                                          (CC_C_extends x!1)))
                                   ((_ is T_A) (CC_C_extends x!1))
                                   (valid  (CC_C_extends x!1))))
                         (a!6 (or ((_ is Wildcard ) (CC_D_a x!1))
                                  (and ((_ is CC_B) param_2)
                                       (subcase  (CC_D_a x!1) param_2)))))
                   (let ((a!2 (and ((_ is CC_A) x!1)
                                   (or ((_ is Wildcard ) (CC_A_a x!1))
                                       ((_ is Byte) (CC_A_a x!1)))
                                   (or ((_ is Wildcard ) (CC_A_b x!1))
                                       a!1)
                                   (not ((_ is Wildcard )
                                          (CC_A_extends x!1)))
                                   ((_ is T_A) (CC_A_extends x!1))
                                   (valid  (CC_A_a x!1))
                                   (valid  (CC_A_b x!1))
                                   (valid  (CC_A_extends x!1))))
                         (a!4 (and ((_ is CC_B) x!1)
                                   a!3
                                   (not ((_ is Wildcard )
                                          (CC_B_extends x!1)))
                                   ((_ is T_A) (CC_B_extends x!1))
                                   (valid  (CC_B_a x!1))
                                   (valid  (CC_B_extends x!1))))
                         (a!7 (and ((_ is CC_D) x!1)
                                   a!6
                                   (or ((_ is Wildcard ) (CC_D_b x!1))
                                       ((_ is Int) (CC_D_b x!1)))
                                   (not ((_ is Wildcard )
                                          (CC_D_extends x!1)))
                                   ((_ is T_B) (CC_D_extends x!1))
                                   (valid  (CC_D_a x!1))
                                   (valid  (CC_D_b x!1))
                                   (valid  (CC_D_extends x!1)))))
                     (and (=> ((_ is CC_A) x!1) a!2)
                          (=> ((_ is CC_B) x!1) a!4)
                          (=> ((_ is CC_C) x!1) a!5)
                          (=> ((_ is CC_D) x!1) a!7))))
                   (or (= x!1 x!2)
                       (and ((_ is T_A) x!2)
                            ((_ is CC_A) x!1)
                            (= (CC_A_extends x!1) x!2))
                       (and ((_ is CC_A) x!1)
                            ((_ is CC_A) x!2)
                            (subcase  (CC_A_a x!1) (CC_A_a x!2))
                            (subcase  (CC_A_b x!1) (CC_A_b x!2)))
                       (and ((_ is T_A) x!2)
                            ((_ is CC_B) x!1)
                            (= (CC_B_extends x!1) x!2))
                       (and ((_ is CC_B) x!1)
                            ((_ is CC_B) x!2)
                            (subcase  (CC_B_a x!1) (CC_B_a x!2)))
                       (and ((_ is T_A) x!2)
                            ((_ is CC_C) x!1)
                            (= (CC_C_extends x!1) x!2))
                       (and ((_ is CC_C) x!1)
                            ((_ is CC_C) x!2))
                       (and ((_ is T_B) x!2)
                            ((_ is CC_D) x!1)
                            (= (CC_D_extends x!1) x!2))
                       (and ((_ is CC_D) x!1)
                            ((_ is CC_D) x!2)
                            (subcase  (CC_D_a x!1) (CC_D_a x!2))
                            (subcase  (CC_D_b x!1) (CC_D_b x!2)))
                       (and ((_ is Tuple) x!1)
                            ((_ is Tuple) x!2)
                            (subcase  (first x!1) (first x!2))
                            (subcase  (second x!1) (second x!2)))
                       ((_ is Wildcard ) x!1)
                       ((_ is Wildcard ) x!2))))
(assert (and ((_ is CC_A) pattern_0)
     (= (CC_A_a pattern_0) Wildcard)
     ((_ is Tuple) (CC_A_b pattern_0))
     (= (first (CC_A_b pattern_0)) Wildcard)
     (= (second (CC_A_b pattern_0)) Wildcard)
     ((_ is CC_B) pattern_1)
     ((_ is CC_A) (CC_B_a pattern_1))
     (= (CC_A_a (CC_B_a pattern_1)) Wildcard)
     (= (CC_A_b (CC_B_a pattern_1)) Wildcard)))
(assert (and ((_ is T_A) to_match_type)))
(assert ((_ is CC_C) t1))
(assert (subcase  t1 to_match_type))
(assert (valid  t1))
(assert (constructable  t1))
(assert (not (or (subcase  t1 pattern_0) (subcase  t1 pattern_1))))
(check-sat)