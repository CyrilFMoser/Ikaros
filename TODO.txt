- Merge generics

- Allow variance declarations for case classes 

- In type generation check the type depth of an available concrete type

- Graph::is_satisfiable can still generate unreachable types (not a problem just not interesting,I think)
  - If we replace subtypes for equality constraints, replace the generics used in the found type in the equality constraint with 
    new fresh generics that don't exist anywhere else,  as it is only alpha equivalent.
  - At the end of graph is_satisfiable run constraint is_satisfiable again, to:
       1. Get the constraints for the new fresh generics
       2. Check if the new equality constraint might have introduced problems.

  - Change get_reachable to stop the recursion, by looking at whether the final instantiated type was already reachable.
    (Not with the visited vec) 
    

- In get_base, before returning, check if the type is concrete. If it is not and there is an equality constraint for that generic
  substitute it with that. Otherwise if there are subtype constraints, try to find all the possible types that could be used. 
  Choose any of them (could be improved later). If there are no subtype constraints either, just use a random concrete type.